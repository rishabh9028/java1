What will be the result?

class TestModifiers{
         int i;
         public static void main (String[] args) {
                   int i; //1
                  private int a = 1; //2
                  protected int b = 1; //3
                  public int c = 1; //4
                  System.out.println(a+b+c); //5
         }
}
Single Choice - Select one correct answer from the options list.
compiletime error at line 1,2,3,4,5;
compiletime error at line 2,3,4,5;
compiletime error at line 2,3,4;
Prints 3


public class Test {
    public static void main(String[] args) {
        int n = 1;
        outer :
        while (n < 6) {
            for (int i = 0; i < 10; i++) {
                if (i % 2 == 0) {
                    System.out.print(i + " ");
                    continue;
                } else {
                    System.out.print(n + " ");
                    break outer;
                }
            }
            n++;
        }
    }
}
Single Choice - Select one correct answer from the options list.
0 2 4 6 7 1
0 1 0 1 0 1 0 1 0 1
0 1
compile Erorr

**********************************************************

Which of the following is true?

 A. An interface cannot be instantiated.
 B. A final field of a class can be instantiated in the constructor. 
 C. A protected field of a class is accessible by child class in any package.
 D. A class can implement more than one interface
Single Choice - Select one correct answer from the options list.
A & D
A, C & D
A, B &D
All of them


****************************************

What is the output if Main is run?

public abstract class Vehicle {
 private int tyres;
 public void setTyres(int tyres) {
   this.tyres = tyres;
 } 
 public int getTyres() {
   return tyres;
 } 
}
public class Car extends Vehicle {
  @Override
  public int getTyre() {
     return super.getTyres()+1;
  } 
}
public class Main {
  public static void main(String args[]) {
    Car c = new Car(); 
    c.setTyres(5); 
    System.out.println("Tyres = "+c.getTyres()); 
  }
}
Single Choice - Select one correct answer from the options list.
Tyres = 5
compilation error
Tyres = 6
runtime exception


******************************************************

What is the output?

      String k ="big "; 
      k.concat("crowded ");
      k += "city";
      System.out.println(k);
Single Choice - Select one correct answer from the options list.
compile error
big crowded city
big crowded
big city

**********************************************


Which two code fragments, inserted independently at line 3, generate the output 4247? (Choose two.)

1.public class TestString3 { 
2.      public static void main(String[] args) { 
3.              // insert code here 
4.            System.out.println(s); 
5.      } 
6. }
Multiple Choice - This may have multiple correct answers. Select required answer(s) from the options list.
String s = "123456789"; s = (s-"123").replace(1,3,"24") - "89";
StringBuffer s = new StringBuffer("123456789"); s.delete(0,3).replace(1,3,"24").delete(4,6);
StringBuffer s = new StringBuffer("123456789"); s.substring(3,6).delete(1,3).insert(1, "24");
StringBuilder s = new StringBuilder("123456789"); s.substring(3,6).delete(1,2).insert(1, "24");
StringBuilder s = new StringBuilder("123456789"); s.delete(0,3).delete(1,3).delete(2,5).insert(1, "24");


*****************************************************

What will be the output?

  public class Test {
     public static void main(String[] args) {
        try {
            badMethod();
            System.out.print("E");
            return;
        } catch (RuntimeException ex) {
            System.out.print("B");
        } catch (Exception ex1) {
            System.out.print("C");
        } finally {
            System.out.print("D");
        }
    }
    public static void badMethod() {
        System.out.print("A");
    }
 }
Single Choice - Select one correct answer from the options list.
AED
ABD
AE
Compilation Erro

*******************************************************************
Which two classes inherit the Shape class correctly? (Choose two.)

public abstract class Shape { 
private int x; 
private int y; 
public abstract void draw(); 
public void setAnchor(int x, int y) { 
this.x = x; 17. this.y = y; 
} 
              }
Multiple Choice - This may have multiple correct answers. Select required answer(s) from the options list.
public class Circle implements Shape { private int radius; }
public abstract class Circle extends Shape { private int radius; }
public class Circle extends Shape { private int radius; public void draw(); }
public abstract class Circle implements Shape { private int radius; public void draw(); }
public class Circle extends Shape {
private int radius; public void draw() {/* code here */} 

**********************************************************

What will be the output?

     String[][] names = {
                 {"Mr.", "Mrs.", "Ms."},
                 {"John", "Gupta", "Hegde", "Khan"},
                 {":M", ":F"}
               };
     System.out.println(names[0][2] + names[1][2]+ names[2][1]);
Single Choice - Select one correct answer from the options list.
Compile error
Mrs.Gupta : M
Ms.Hegde : F
Mr.Khan : M

*****************************************************

The following code :

public class Test{ 
  public static void main(String args[]) {
    B b = new B();
  }
}
class A {
  A() {
    System.out.print("A");
  }
}
class B extends A{
  B() {
    System.out.print("B");
  }
}
Single Choice - Select one correct answer from the options list.
Gives output : BA
Gives output : AB
Gives output : B
Compilation Error


********************************************************
What is the output?

 public class Test {
    public static void main(String[] args) {
        StringBuilder a = new StringBuilder("A");
        StringBuilder b = new StringBuilder("B");
        change(a, b);
        System.out.println(a + "," + b);
    }
    static void change(StringBuilder x, StringBuilder y) {
        y.append(x);
        y = x;
    }
 }
Single Choice - Select one correct answer from the options list.
A,BA
A,B
A,A
compile Erorr

**********************************************************

What will be the output?

public class Test_1 {
    static String str;
       public static void main(String[] args) {
        String s;
        if(str=="abc")
           s = str+10;
        System.out.println(str);
        System.out.print(s);
       }
}
Single Choice - Select one correct answer from the options list.
null and null are printed as output.
runtime error.
Compile error, cannot access str from main.
Compile error, s not initialise


*************************************************************
What will be the output?

public class Test_1 {
    static String str;
       public static void main(String[] args) {
        String s;
        if(str=="abc")
           s = str+10;
        System.out.println(str);
        System.out.print(s);
       }
}
Single Choice - Select one correct answer from the options list.
null and null are printed as output.
runtime error.
Compile error, cannot access str from main.
Compile error, s not initialise

**************************************************************

What will be the output?

public class Test_1 {
    static String str;
       public static void main(String[] args) {
        String s;
        if(str=="abc")
           s = str+10;
        System.out.println(str);
        System.out.print(s);
       }
}
Single Choice - Select one correct answer from the options list.
null and null are printed as output.
runtime error.
Compile error, cannot access str from main.
Compile error, s not initialise


class Atom { 
             Atom() { 
        System.out.print("atom "); 
} 
 }
//////////////////////
class Rock extends Atom { 
Rock(String type) { 
System.out.print(type); 
} 
}
//////////////////////

public class Mountain extends Rock { 
Mountain() { 
super("granite "); 
new Rock("granite "); 
} 
public static void main(String[] a) { 
new Mountain(); 
} 
}
***************************************************
What will be the result?
Single Choice - Select one correct answer from the options list.
Compilation fails.
atom granite
atom granite atom granite
atom granite granite

***************************************************

What is the output of the following?

1  class StringCheck {
2
3    static String[] str=new String[50];
4    public static void main(String[] args) {
5        for(int i=0; i<str.length; i++) {
6           str[i] = i;
7           System.out.print(str[i]);
8        }
9    }
10 }
Single Choice - Select one correct answer from the options list.
compile error at line 6.
0 to 49 printed continuously.
compile error at line 7.
null printed 50 times.

******************************************************************

Given:

1. static void test() throws RuntimeException { 
2. try { 
3. System.out.print("test "); 
4. throw new RuntimeException(); 
5. } 
6. catch (Exception ex) { System.out.print("exception "); } 
7. } 
8. public static void main(String[] args) { 
9. try { test(); } 
10. catch (RuntimeException ex) { System.out.print("runtime "); } 
11. System.out.print("end "); 
12. } 

What will be the result?
Single Choice - Select one correct answer from the options list.
test ends
compilation error
test runtime end
test exception end
A Throwable is thrown by main at runtime.

*********************************************************************
Given:

1. static void test() throws RuntimeException { 
2. try { 
3. System.out.print("test "); 
4. throw new RuntimeException(); 
5. } 
6. catch (Exception ex) { System.out.print("exception "); } 
7. } 
8. public static void main(String[] args) { 
9. try { test(); } 
10. catch (RuntimeException ex) { System.out.print("runtime "); } 
11. System.out.print("end "); 
12. } 

What will be the result?
Single Choice - Select one correct answer from the options list.
test ends
compilation error
test runtime end
test exception end
A Throwable is thrown by main at runtime.


***************************************************

Which statement is true?
Single Choice - Select one correct answer from the options list.
A class's finalize() method CANNOT be invoked explicitly. 
super.finalize() is called implicitly by any overriding finalize() method. 
The finalize() method for a given object is called no more than once by the garbage collector. 
The order in which finalize() is called on two objects is based on the order in which the two objects 
became finalizable.


What is the output for the following?

   public class Test {
      public static void main(String [] args) {
         short a, b, c=0;
         a=1;
         b=2;
         c=a+b;
         System.out.println(c);
      }
  }
Single Choice - Select one correct answer from the options list.
Compile error.
3
1
runtime exception
